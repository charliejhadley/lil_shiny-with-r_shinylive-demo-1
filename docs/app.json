[{"name":"app.R","content":"library(\"shiny\")\nlibrary(\"bslib\")\nlibrary(\"ggplot2\")\nlibrary(\"dplyr\")\n\nui <- bslib::page_navbar(\n  title = \"Shiny live example\",\n  nav_panel(title = \"Chart\", \n            page_sidebar(\n              sidebar = list(\n                selectInput(\n                  \"vore\", \"Visualise animals with diet:\",\n                  choices = na.omit(sort(unique(msleep$vore))),\n                  selected = \"carni\"\n                ),\n                varSelectInput(\"variable\", \"Variable:\", msleep %>% \n                                 select(where(is.numeric)),\n                               selected = \"sleep_rem\"),\n                selectInput(\n                  \"model\", \"Model type:\",\n                  choices = c(\"lm\", \"loess\"),\n                  selected = \"lm\"\n                )\n              ),\n              card(plotOutput(\"gg_plot\"))\n            )),\n  nav_panel(title = \"About\",\n            list(p(\"This shiny app is part of the\", a(href = \"https://www.linkedin.com/learning/building-data-apps-with-r-and-shiny-essential-training\", \"LinkedIn Learning Course: Building Data Apps with R and Shiny.\"))),\n            p(\"The app demonstrates how it's possible to use shinylive to create shiny apps that work without a server.\"))\n)\n\nserver <- function(input, output, session){\n  \n  output$gg_plot <- renderPlot({\n    \n    msleep %>% \n      filter(vore == input$vore) %>% \n      ggplot() +\n      aes_string(x = \"sleep_total\",\n                 y = input$variable) +\n      geom_point(size = 4,\n                 colour = \"darkblue\") +\n      stat_smooth(method = input$model, col = \"red\") +\n      theme_minimal(base_size = 18)\n    \n  })\n  \n}\n\nshinyApp(ui, server)","type":"text"}]
